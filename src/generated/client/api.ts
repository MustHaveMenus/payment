/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddOnDto
 */
export interface AddOnDto {
    /**
     * 
     * @type {string}
     * @memberof AddOnDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddOnDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddOnDto
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof AddOnDto
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof AddOnDto
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof AddOnDto
     */
    'type'?: AddOnDtoTypeEnum;
}

export const AddOnDtoTypeEnum = {
    User: 'USER',
    Location: 'LOCATION',
    None: 'NONE'
} as const;

export type AddOnDtoTypeEnum = typeof AddOnDtoTypeEnum[keyof typeof AddOnDtoTypeEnum];

/**
 * 
 * @export
 * @interface AddonExpirationDto
 */
export interface AddonExpirationDto {
    /**
     * 
     * @type {string}
     * @memberof AddonExpirationDto
     */
    'date'?: string;
}
/**
 * 
 * @export
 * @interface BillingAddressDto
 */
export interface BillingAddressDto {
    /**
     * 
     * @type {string}
     * @memberof BillingAddressDto
     */
    'first'?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingAddressDto
     */
    'last'?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingAddressDto
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingAddressDto
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingAddressDto
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingAddressDto
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingAddressDto
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingAddressDto
     */
    'zip'?: string;
    /**
     * 
     * @type {string}
     * @memberof BillingAddressDto
     */
    'phone'?: string;
}
/**
 * 
 * @export
 * @interface BrandBackgroundImageDto
 */
export interface BrandBackgroundImageDto {
    /**
     * 
     * @type {string}
     * @memberof BrandBackgroundImageDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandBackgroundImageDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandBackgroundImageDto
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandBackgroundImageDto
     */
    'brandId'?: string;
}
/**
 * 
 * @export
 * @interface BrandColorDto
 */
export interface BrandColorDto {
    /**
     * 
     * @type {string}
     * @memberof BrandColorDto
     */
    'colorCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandColorDto
     */
    'brandId'?: string;
}
/**
 * 
 * @export
 * @interface BrandDto
 */
export interface BrandDto {
    /**
     * 
     * @type {string}
     * @memberof BrandDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandDto
     */
    'memberId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandDto
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BrandDto
     */
    'draft'?: boolean;
    /**
     * 
     * @type {BrandFontDto}
     * @memberof BrandDto
     */
    'fontHeader'?: BrandFontDto;
    /**
     * 
     * @type {BrandFontDto}
     * @memberof BrandDto
     */
    'fontSubheader'?: BrandFontDto;
    /**
     * 
     * @type {BrandFontDto}
     * @memberof BrandDto
     */
    'fontBodyText'?: BrandFontDto;
    /**
     * 
     * @type {Array<BrandLogoDto>}
     * @memberof BrandDto
     */
    'logos'?: Array<BrandLogoDto>;
    /**
     * 
     * @type {Array<BrandBackgroundImageDto>}
     * @memberof BrandDto
     */
    'backgroundImages'?: Array<BrandBackgroundImageDto>;
    /**
     * 
     * @type {Array<BrandColorDto>}
     * @memberof BrandDto
     */
    'colors'?: Array<BrandColorDto>;
    /**
     * 
     * @type {Array<BrandProFontDto>}
     * @memberof BrandDto
     */
    'proFonts'?: Array<BrandProFontDto>;
    /**
     * 
     * @type {Array<BrandUploadedFontDto>}
     * @memberof BrandDto
     */
    'uploadedFonts'?: Array<BrandUploadedFontDto>;
}
/**
 * 
 * @export
 * @interface BrandFontDto
 */
export interface BrandFontDto {
    /**
     * 
     * @type {string}
     * @memberof BrandFontDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandFontDto
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof BrandFontDto
     */
    'size'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BrandFontDto
     */
    'bold'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BrandFontDto
     */
    'italic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BrandFontDto
     */
    'underline'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BrandFontDto
     */
    'brandId'?: string;
    /**
     * 
     * @type {number}
     * @memberof BrandFontDto
     */
    'textType'?: number;
    /**
     * 
     * @type {string}
     * @memberof BrandFontDto
     */
    'fontName'?: string;
}
/**
 * 
 * @export
 * @interface BrandLogoDto
 */
export interface BrandLogoDto {
    /**
     * 
     * @type {string}
     * @memberof BrandLogoDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandLogoDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandLogoDto
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandLogoDto
     */
    'brandId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BrandLogoDto
     */
    'removed'?: boolean;
}
/**
 * 
 * @export
 * @interface BrandProFontDto
 */
export interface BrandProFontDto {
    /**
     * 
     * @type {string}
     * @memberof BrandProFontDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandProFontDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandProFontDto
     */
    'brandId'?: string;
}
/**
 * 
 * @export
 * @interface BrandUploadedFontDto
 */
export interface BrandUploadedFontDto {
    /**
     * 
     * @type {string}
     * @memberof BrandUploadedFontDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandUploadedFontDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandUploadedFontDto
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandUploadedFontDto
     */
    'brandId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BrandUploadedFontDto
     */
    'removed'?: boolean;
}
/**
 * 
 * @export
 * @interface CardDto
 */
export interface CardDto {
    /**
     * 
     * @type {string}
     * @memberof CardDto
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardDto
     */
    'cvv'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardDto
     */
    'year'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardDto
     */
    'month'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CardDto
     */
    'valid'?: boolean;
}
/**
 * 
 * @export
 * @interface FullBillingDto
 */
export interface FullBillingDto {
    /**
     * 
     * @type {BillingAddressDto}
     * @memberof FullBillingDto
     */
    'address'?: BillingAddressDto;
    /**
     * 
     * @type {UpdateCardDto}
     * @memberof FullBillingDto
     */
    'card'?: UpdateCardDto;
}
/**
 * 
 * @export
 * @interface InitDto
 */
export interface InitDto {
    /**
     * 
     * @type {string}
     * @memberof InitDto
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InitDto
     */
    'owner'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InitDto
     */
    'internalId'?: number;
    /**
     * 
     * @type {string}
     * @memberof InitDto
     */
    'teamId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InitDto
     */
    'logged'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InitDto
     */
    'plan'?: InitDtoPlanEnum;
    /**
     * 
     * @type {string}
     * @memberof InitDto
     */
    'memberStatus'?: InitDtoMemberStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof InitDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof InitDto
     */
    'name'?: string;
}

export const InitDtoPlanEnum = {
    Free: 'FREE',
    Premium: 'PREMIUM',
    Enterprise: 'ENTERPRISE'
} as const;

export type InitDtoPlanEnum = typeof InitDtoPlanEnum[keyof typeof InitDtoPlanEnum];
export const InitDtoMemberStatusEnum = {
    Active: 'Active',
    Hold: 'Hold',
    Cancelled: 'Cancelled',
    Declined: 'Declined',
    Freemium: 'Freemium',
    Paused: 'Paused',
    PastDue: 'PastDue'
} as const;

export type InitDtoMemberStatusEnum = typeof InitDtoMemberStatusEnum[keyof typeof InitDtoMemberStatusEnum];

/**
 * 
 * @export
 * @interface InviteUserDto
 */
export interface InviteUserDto {
    /**
     * 
     * @type {string}
     * @memberof InviteUserDto
     */
    'email'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InviteUserDto
     */
    'locations'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof InviteUserDto
     */
    'ownerId'?: string;
}
/**
 * 
 * @export
 * @interface LightCardDto
 */
export interface LightCardDto {
    /**
     * 
     * @type {string}
     * @memberof LightCardDto
     */
    'ending'?: string;
    /**
     * 
     * @type {number}
     * @memberof LightCardDto
     */
    'exprMonth'?: number;
    /**
     * 
     * @type {number}
     * @memberof LightCardDto
     */
    'exprYear'?: number;
}
/**
 * 
 * @export
 * @interface LocationDto
 */
export interface LocationDto {
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof LocationDto
     */
    'internalId'?: number;
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'website'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'twitter'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'instagram'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'facebook'?: string;
    /**
     * 
     * @type {number}
     * @memberof LocationDto
     */
    'restaurantId'?: number;
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'address2'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'zip'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'brandId'?: string;
    /**
     * 
     * @type {Array<BrandLogoDto>}
     * @memberof LocationDto
     */
    'brandLogos'?: Array<BrandLogoDto>;
    /**
     * 
     * @type {Array<BrandUploadedFontDto>}
     * @memberof LocationDto
     */
    'brandUploadedFonts'?: Array<BrandUploadedFontDto>;
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'type'?: LocationDtoTypeEnum;
    /**
     * 
     * @type {Array<MemberDto>}
     * @memberof LocationDto
     */
    'managers'?: Array<MemberDto>;
    /**
     * 
     * @type {boolean}
     * @memberof LocationDto
     */
    'removed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof LocationDto
     */
    'designCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationDto
     */
    'qrCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationDto
     */
    'lpCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationDto
     */
    'omCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof LocationDto
     */
    'createdDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LocationDto
     */
    'primary'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LocationDto
     */
    'disabled'?: boolean;
}

export const LocationDtoTypeEnum = {
    Restaurant: 'Restaurant',
    Spa: 'Spa',
    Dispensary: 'Dispensary',
    Designer: 'Designer',
    Other: 'Other'
} as const;

export type LocationDtoTypeEnum = typeof LocationDtoTypeEnum[keyof typeof LocationDtoTypeEnum];

/**
 * 
 * @export
 * @interface MemberDto
 */
export interface MemberDto {
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberDto
     */
    'internalId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    'friendlyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    'email'?: string;
    /**
     * 
     * @type {Set<LocationDto>}
     * @memberof MemberDto
     */
    'locations'?: Set<LocationDto>;
    /**
     * 
     * @type {number}
     * @memberof MemberDto
     */
    'paymentStatus'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    'invitationStatus'?: MemberDtoInvitationStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    'teamId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    'lastLogin'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MemberDto
     */
    'removed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    'memberStatus'?: MemberDtoMemberStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof MemberDto
     */
    'primaryLocationId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberDto
     */
    'availableSeats'?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    'role'?: MemberDtoRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    'createdDate'?: string;
}

export const MemberDtoInvitationStatusEnum = {
    Invited: 'Invited',
    Active: 'Active',
    Revoked: 'Revoked'
} as const;

export type MemberDtoInvitationStatusEnum = typeof MemberDtoInvitationStatusEnum[keyof typeof MemberDtoInvitationStatusEnum];
export const MemberDtoMemberStatusEnum = {
    Active: 'Active',
    Hold: 'Hold',
    Cancelled: 'Cancelled',
    Declined: 'Declined',
    Freemium: 'Freemium',
    Paused: 'Paused',
    PastDue: 'PastDue'
} as const;

export type MemberDtoMemberStatusEnum = typeof MemberDtoMemberStatusEnum[keyof typeof MemberDtoMemberStatusEnum];
export const MemberDtoRoleEnum = {
    User: 'User',
    Owner: 'Owner'
} as const;

export type MemberDtoRoleEnum = typeof MemberDtoRoleEnum[keyof typeof MemberDtoRoleEnum];

/**
 * 
 * @export
 * @interface PaymentDetailsDto
 */
export interface PaymentDetailsDto {
    /**
     * 
     * @type {BillingAddressDto}
     * @memberof PaymentDetailsDto
     */
    'billing'?: BillingAddressDto;
    /**
     * 
     * @type {LightCardDto}
     * @memberof PaymentDetailsDto
     */
    'card'?: LightCardDto;
}
/**
 * 
 * @export
 * @interface PrintDto
 */
export interface PrintDto {
    /**
     * 
     * @type {number}
     * @memberof PrintDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PrintDto
     */
    'menuId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrintDto
     */
    'finishedDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof PrintDto
     */
    'total'?: number;
    /**
     * 
     * @type {Array<PrintProductDto>}
     * @memberof PrintDto
     */
    'items'?: Array<PrintProductDto>;
    /**
     * 
     * @type {number}
     * @memberof PrintDto
     */
    'itemCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PrintDto
     */
    'location'?: string;
    /**
     * 
     * @type {number}
     * @memberof PrintDto
     */
    'status'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PrintDto
     */
    'available'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PrintDto
     */
    'test'?: boolean;
}
/**
 * 
 * @export
 * @interface PrintProductDto
 */
export interface PrintProductDto {
    /**
     * 
     * @type {number}
     * @memberof PrintProductDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PrintProductDto
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrintProductDto
     */
    'menuId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrintProductDto
     */
    'pdfId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PrintProductDto
     */
    'nextGen'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PrintProductDto
     */
    'pdfUploaded'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PrintProductDto
     */
    'available'?: boolean;
}
/**
 * 
 * @export
 * @interface PurchaseDto
 */
export interface PurchaseDto {
    /**
     * 
     * @type {number}
     * @memberof PurchaseDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PurchaseDto
     */
    'purchaseDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof PurchaseDto
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof PurchaseDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseDto
     */
    'transactionId'?: string;
}
/**
 * 
 * @export
 * @interface RegisterDto
 */
export interface RegisterDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'first'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'last'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'confirm'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'invitation'?: string;
}
/**
 * 
 * @export
 * @interface RegisterMemberDto
 */
export interface RegisterMemberDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterMemberDto
     */
    'first'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterMemberDto
     */
    'last'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterMemberDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterMemberDto
     */
    'business'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterMemberDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterMemberDto
     */
    'zip'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterMemberDto
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface SubStatusDto
 */
export interface SubStatusDto {
    /**
     * 
     * @type {string}
     * @memberof SubStatusDto
     */
    'plan'?: SubStatusDtoPlanEnum;
    /**
     * 
     * @type {string}
     * @memberof SubStatusDto
     */
    'status'?: SubStatusDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof SubStatusDto
     */
    'email'?: string;
    /**
     * 
     * @type {number}
     * @memberof SubStatusDto
     */
    'grandTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof SubStatusDto
     */
    'dueToday'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SubStatusDto
     */
    'planUpgradeInProgress'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubStatusDto
     */
    'planCycle'?: SubStatusDtoPlanCycleEnum;
    /**
     * 
     * @type {string}
     * @memberof SubStatusDto
     */
    'planEndDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubStatusDto
     */
    'nextPlanBillingDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof SubStatusDto
     */
    'planTotal'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SubStatusDto
     */
    'addonsUpgradeInProgress'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubStatusDto
     */
    'addonsCycle'?: SubStatusDtoAddonsCycleEnum;
    /**
     * 
     * @type {string}
     * @memberof SubStatusDto
     */
    'addonsEndDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubStatusDto
     */
    'nextAddonsBillingDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof SubStatusDto
     */
    'addonsTotal'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SubStatusDto
     */
    'addonsPendingChange'?: boolean;
    /**
     * 
     * @type {Array<AddOnDto>}
     * @memberof SubStatusDto
     */
    'addons'?: Array<AddOnDto>;
}

export const SubStatusDtoPlanEnum = {
    Free: 'FREE',
    Premium: 'PREMIUM',
    Enterprise: 'ENTERPRISE'
} as const;

export type SubStatusDtoPlanEnum = typeof SubStatusDtoPlanEnum[keyof typeof SubStatusDtoPlanEnum];
export const SubStatusDtoStatusEnum = {
    Active: 'Active',
    Inactive: 'Inactive',
    Paused: 'Paused',
    WillPause: 'WillPause',
    Expired: 'Expired',
    Preview: 'Preview'
} as const;

export type SubStatusDtoStatusEnum = typeof SubStatusDtoStatusEnum[keyof typeof SubStatusDtoStatusEnum];
export const SubStatusDtoPlanCycleEnum = {
    No: 'No',
    Daily: 'Daily',
    Monthly: 'Monthly',
    Yearly: 'Yearly'
} as const;

export type SubStatusDtoPlanCycleEnum = typeof SubStatusDtoPlanCycleEnum[keyof typeof SubStatusDtoPlanCycleEnum];
export const SubStatusDtoAddonsCycleEnum = {
    No: 'No',
    Daily: 'Daily',
    Monthly: 'Monthly',
    Yearly: 'Yearly'
} as const;

export type SubStatusDtoAddonsCycleEnum = typeof SubStatusDtoAddonsCycleEnum[keyof typeof SubStatusDtoAddonsCycleEnum];

/**
 * 
 * @export
 * @interface TransferFilesDto
 */
export interface TransferFilesDto {
    /**
     * 
     * @type {number}
     * @memberof TransferFilesDto
     */
    'fromLocationId'?: number;
    /**
     * 
     * @type {number}
     * @memberof TransferFilesDto
     */
    'toLocationId'?: number;
}
/**
 * 
 * @export
 * @interface UpdateCardDto
 */
export interface UpdateCardDto {
    /**
     * 
     * @type {CardDto}
     * @memberof UpdateCardDto
     */
    'card'?: CardDto;
    /**
     * 
     * @type {string}
     * @memberof UpdateCardDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCardDto
     */
    'ip'?: string;
}
/**
 * 
 * @export
 * @interface UpdateMemberDto
 */
export interface UpdateMemberDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateMemberDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMemberDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMemberDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateMemberDto
     */
    'currentPassword'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateMemberDto
     */
    'hasToastInterest'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateMemberDto
     */
    'hasCsCallInterest'?: boolean;
}
/**
 * 
 * @export
 * @interface UserDetailsDto
 */
export interface UserDetailsDto {
    /**
     * 
     * @type {MemberDto}
     * @memberof UserDetailsDto
     */
    'owner'?: MemberDto;
    /**
     * 
     * @type {Array<MemberDto>}
     * @memberof UserDetailsDto
     */
    'users'?: Array<MemberDto>;
}

/**
 * AccountsResourceApi - axios parameter creator
 * @export
 */
export const AccountsResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} memberId 
         * @param {boolean} preview 
         * @param {number} quantity 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscriptionAddon: async (memberId: string, preview: boolean, quantity: number, body: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('addSubscriptionAddon', 'memberId', memberId)
            // verify required parameter 'preview' is not null or undefined
            assertParamExists('addSubscriptionAddon', 'preview', preview)
            // verify required parameter 'quantity' is not null or undefined
            assertParamExists('addSubscriptionAddon', 'quantity', quantity)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('addSubscriptionAddon', 'body', body)
            const localVarPath = `/api/v1/accounts/{memberId}/subscription/addons`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (preview !== undefined) {
                localVarQueryParameter['preview'] = preview;
            }

            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('cancelSubscription', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/subscription/cancel`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {boolean} preview 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeSubscriptionPlan: async (memberId: string, preview: boolean, body: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('changeSubscriptionPlan', 'memberId', memberId)
            // verify required parameter 'preview' is not null or undefined
            assertParamExists('changeSubscriptionPlan', 'preview', preview)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('changeSubscriptionPlan', 'body', body)
            const localVarPath = `/api/v1/accounts/{memberId}/subscription/change`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (preview !== undefined) {
                localVarQueryParameter['preview'] = preview;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountPaymentDetails: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getAccountPaymentDetails', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/payments`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountPrintHistory: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getAccountPrintHistory', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/prints`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountPurchaseInvoicePDF: async (memberId: string, transactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getAccountPurchaseInvoicePDF', 'memberId', memberId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('getAccountPurchaseInvoicePDF', 'transactionId', transactionId)
            const localVarPath = `/api/v1/accounts/{memberId}/purchases/invoice/{transactionId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountPurchases: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getAccountPurchases', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/purchases`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddOnsExpirationDate: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getAddOnsExpirationDate', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/subscription/addons/expiration`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersDetails: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getAllUsersDetails', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/users/all`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableAddons: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getAvailableAddons', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/subscription/availableAddons`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableSubscriptions: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getAvailableSubscriptions', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/subscription/list`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberRole: async (memberId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getMemberRole', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/role`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrimaryUserLocation: async (memberId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getPrimaryUserLocation', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/locations/primary`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getSubscription', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/subscription`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionAddons: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getSubscriptionAddons', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/subscription/addons`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamAvailableSeats: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTeamAvailableSeats', 'teamId', teamId)
            const localVarPath = `/api/v1/accounts/{teamId}/seats`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserBrands: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getUserBrands', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/brands`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLocations: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getUserLocations', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/locations`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersDetails: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('getUsersDetails', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/users`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {number} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseSubscription: async (memberId: string, body: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('pauseSubscription', 'memberId', memberId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('pauseSubscription', 'body', body)
            const localVarPath = `/api/v1/accounts/{memberId}/subscription/pause`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reactivateSubscription: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('reactivateSubscription', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/subscription/reactivate`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscriptionAddon: async (memberId: string, body: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('removeSubscriptionAddon', 'memberId', memberId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('removeSubscriptionAddon', 'body', body)
            const localVarPath = `/api/v1/accounts/{memberId}/subscription/addons`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeSubscription: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('resumeSubscription', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/subscription/resume`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {FullBillingDto} fullBillingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveFullBillingInfo: async (memberId: string, fullBillingDto: FullBillingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('saveFullBillingInfo', 'memberId', memberId)
            // verify required parameter 'fullBillingDto' is not null or undefined
            assertParamExists('saveFullBillingInfo', 'fullBillingDto', fullBillingDto)
            const localVarPath = `/api/v1/accounts/{memberId}/billing`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fullBillingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} memberId 
         * @param {number} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPrimaryUserLocation: async (memberId: number, locationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('setPrimaryUserLocation', 'memberId', memberId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('setPrimaryUserLocation', 'locationId', locationId)
            const localVarPath = `/api/v1/accounts/{memberId}/locations/{locationId}/primary`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)))
                .replace(`{${"locationId"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {UpdateCardDto} updateCardDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountPaymentDetailsCard: async (memberId: string, updateCardDto: UpdateCardDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('updateAccountPaymentDetailsCard', 'memberId', memberId)
            // verify required parameter 'updateCardDto' is not null or undefined
            assertParamExists('updateAccountPaymentDetailsCard', 'updateCardDto', updateCardDto)
            const localVarPath = `/api/v1/accounts/{memberId}/payments/card`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCardDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateBilling: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('validateBilling', 'memberId', memberId)
            const localVarPath = `/api/v1/accounts/{memberId}/billing/validate`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsResourceApi - functional programming interface
 * @export
 */
export const AccountsResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} memberId 
         * @param {boolean} preview 
         * @param {number} quantity 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSubscriptionAddon(memberId: string, preview: boolean, quantity: number, body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubStatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSubscriptionAddon(memberId, preview, quantity, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelSubscription(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubStatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelSubscription(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {boolean} preview 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeSubscriptionPlan(memberId: string, preview: boolean, body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubStatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeSubscriptionPlan(memberId, preview, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountPaymentDetails(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountPaymentDetails(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountPrintHistory(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrintDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountPrintHistory(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountPurchaseInvoicePDF(memberId: string, transactionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountPurchaseInvoicePDF(memberId, transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountPurchases(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PurchaseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountPurchases(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddOnsExpirationDate(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddonExpirationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddOnsExpirationDate(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsersDetails(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsersDetails(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableAddons(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddOnDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableAddons(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableSubscriptions(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubStatusDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableSubscriptions(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberRole(memberId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberRole(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrimaryUserLocation(memberId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrimaryUserLocation(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscription(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubStatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscription(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionAddons(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddOnDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptionAddons(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamAvailableSeats(teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamAvailableSeats(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserBrands(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BrandDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserBrands(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserLocations(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LocationDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserLocations(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersDetails(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersDetails(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {number} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseSubscription(memberId: string, body: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubStatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pauseSubscription(memberId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reactivateSubscription(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubStatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reactivateSubscription(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSubscriptionAddon(memberId: string, body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSubscriptionAddon(memberId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeSubscription(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubStatusDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resumeSubscription(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {FullBillingDto} fullBillingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveFullBillingInfo(memberId: string, fullBillingDto: FullBillingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveFullBillingInfo(memberId, fullBillingDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} memberId 
         * @param {number} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPrimaryUserLocation(memberId: number, locationId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setPrimaryUserLocation(memberId, locationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {UpdateCardDto} updateCardDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccountPaymentDetailsCard(memberId: string, updateCardDto: UpdateCardDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LightCardDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccountPaymentDetailsCard(memberId, updateCardDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateBilling(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateBilling(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsResourceApi - factory interface
 * @export
 */
export const AccountsResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} memberId 
         * @param {boolean} preview 
         * @param {number} quantity 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscriptionAddon(memberId: string, preview: boolean, quantity: number, body: string, options?: any): AxiosPromise<SubStatusDto> {
            return localVarFp.addSubscriptionAddon(memberId, preview, quantity, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription(memberId: string, options?: any): AxiosPromise<SubStatusDto> {
            return localVarFp.cancelSubscription(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {boolean} preview 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeSubscriptionPlan(memberId: string, preview: boolean, body: string, options?: any): AxiosPromise<SubStatusDto> {
            return localVarFp.changeSubscriptionPlan(memberId, preview, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountPaymentDetails(memberId: string, options?: any): AxiosPromise<PaymentDetailsDto> {
            return localVarFp.getAccountPaymentDetails(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountPrintHistory(memberId: string, options?: any): AxiosPromise<Array<PrintDto>> {
            return localVarFp.getAccountPrintHistory(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {string} transactionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountPurchaseInvoicePDF(memberId: string, transactionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getAccountPurchaseInvoicePDF(memberId, transactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountPurchases(memberId: string, options?: any): AxiosPromise<Array<PurchaseDto>> {
            return localVarFp.getAccountPurchases(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddOnsExpirationDate(memberId: string, options?: any): AxiosPromise<AddonExpirationDto> {
            return localVarFp.getAddOnsExpirationDate(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersDetails(memberId: string, options?: any): AxiosPromise<UserDetailsDto> {
            return localVarFp.getAllUsersDetails(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableAddons(memberId: string, options?: any): AxiosPromise<Array<AddOnDto>> {
            return localVarFp.getAvailableAddons(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableSubscriptions(memberId: string, options?: any): AxiosPromise<Array<SubStatusDto>> {
            return localVarFp.getAvailableSubscriptions(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberRole(memberId: number, options?: any): AxiosPromise<string> {
            return localVarFp.getMemberRole(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrimaryUserLocation(memberId: number, options?: any): AxiosPromise<LocationDto> {
            return localVarFp.getPrimaryUserLocation(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription(memberId: string, options?: any): AxiosPromise<SubStatusDto> {
            return localVarFp.getSubscription(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionAddons(memberId: string, options?: any): AxiosPromise<Array<AddOnDto>> {
            return localVarFp.getSubscriptionAddons(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamAvailableSeats(teamId: string, options?: any): AxiosPromise<number> {
            return localVarFp.getTeamAvailableSeats(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserBrands(memberId: string, options?: any): AxiosPromise<Array<BrandDto>> {
            return localVarFp.getUserBrands(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLocations(memberId: string, options?: any): AxiosPromise<Array<LocationDto>> {
            return localVarFp.getUserLocations(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersDetails(memberId: string, options?: any): AxiosPromise<UserDetailsDto> {
            return localVarFp.getUsersDetails(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {number} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseSubscription(memberId: string, body: number, options?: any): AxiosPromise<SubStatusDto> {
            return localVarFp.pauseSubscription(memberId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reactivateSubscription(memberId: string, options?: any): AxiosPromise<SubStatusDto> {
            return localVarFp.reactivateSubscription(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscriptionAddon(memberId: string, body: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeSubscriptionAddon(memberId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeSubscription(memberId: string, options?: any): AxiosPromise<SubStatusDto> {
            return localVarFp.resumeSubscription(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {FullBillingDto} fullBillingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveFullBillingInfo(memberId: string, fullBillingDto: FullBillingDto, options?: any): AxiosPromise<void> {
            return localVarFp.saveFullBillingInfo(memberId, fullBillingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} memberId 
         * @param {number} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPrimaryUserLocation(memberId: number, locationId: number, options?: any): AxiosPromise<void> {
            return localVarFp.setPrimaryUserLocation(memberId, locationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {UpdateCardDto} updateCardDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountPaymentDetailsCard(memberId: string, updateCardDto: UpdateCardDto, options?: any): AxiosPromise<LightCardDto> {
            return localVarFp.updateAccountPaymentDetailsCard(memberId, updateCardDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateBilling(memberId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.validateBilling(memberId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsResourceApi - object-oriented interface
 * @export
 * @class AccountsResourceApi
 * @extends {BaseAPI}
 */
export class AccountsResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} memberId 
     * @param {boolean} preview 
     * @param {number} quantity 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public addSubscriptionAddon(memberId: string, preview: boolean, quantity: number, body: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).addSubscriptionAddon(memberId, preview, quantity, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public cancelSubscription(memberId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).cancelSubscription(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {boolean} preview 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public changeSubscriptionPlan(memberId: string, preview: boolean, body: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).changeSubscriptionPlan(memberId, preview, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public getAccountPaymentDetails(memberId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).getAccountPaymentDetails(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public getAccountPrintHistory(memberId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).getAccountPrintHistory(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {string} transactionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public getAccountPurchaseInvoicePDF(memberId: string, transactionId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).getAccountPurchaseInvoicePDF(memberId, transactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public getAccountPurchases(memberId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).getAccountPurchases(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public getAddOnsExpirationDate(memberId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).getAddOnsExpirationDate(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public getAllUsersDetails(memberId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).getAllUsersDetails(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public getAvailableAddons(memberId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).getAvailableAddons(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public getAvailableSubscriptions(memberId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).getAvailableSubscriptions(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public getMemberRole(memberId: number, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).getMemberRole(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public getPrimaryUserLocation(memberId: number, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).getPrimaryUserLocation(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public getSubscription(memberId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).getSubscription(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public getSubscriptionAddons(memberId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).getSubscriptionAddons(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public getTeamAvailableSeats(teamId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).getTeamAvailableSeats(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public getUserBrands(memberId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).getUserBrands(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public getUserLocations(memberId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).getUserLocations(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public getUsersDetails(memberId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).getUsersDetails(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {number} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public pauseSubscription(memberId: string, body: number, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).pauseSubscription(memberId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public reactivateSubscription(memberId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).reactivateSubscription(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public removeSubscriptionAddon(memberId: string, body: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).removeSubscriptionAddon(memberId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public resumeSubscription(memberId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).resumeSubscription(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {FullBillingDto} fullBillingDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public saveFullBillingInfo(memberId: string, fullBillingDto: FullBillingDto, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).saveFullBillingInfo(memberId, fullBillingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} memberId 
     * @param {number} locationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public setPrimaryUserLocation(memberId: number, locationId: number, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).setPrimaryUserLocation(memberId, locationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {UpdateCardDto} updateCardDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public updateAccountPaymentDetailsCard(memberId: string, updateCardDto: UpdateCardDto, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).updateAccountPaymentDetailsCard(memberId, updateCardDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsResourceApi
     */
    public validateBilling(memberId: string, options?: AxiosRequestConfig) {
        return AccountsResourceApiFp(this.configuration).validateBilling(memberId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppResourceApi - axios parameter creator
 * @export
 */
export const AppResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        init: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/public/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppResourceApi - functional programming interface
 * @export
 */
export const AppResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async init(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.init(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppResourceApi - factory interface
 * @export
 */
export const AppResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        init(options?: any): AxiosPromise<InitDto> {
            return localVarFp.init(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppResourceApi - object-oriented interface
 * @export
 * @class AppResourceApi
 * @extends {BaseAPI}
 */
export class AppResourceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppResourceApi
     */
    public init(options?: AxiosRequestConfig) {
        return AppResourceApiFp(this.configuration).init(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BrandsResourceApi - axios parameter creator
 * @export
 */
export const BrandsResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BrandDto} brandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrand: async (brandDto: BrandDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandDto' is not null or undefined
            assertParamExists('createBrand', 'brandDto', brandDto)
            const localVarPath = `/api/v1/brands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(brandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrand: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBrand', 'id', id)
            const localVarPath = `/api/v1/brands/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} brandId 
         * @param {string} colorCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandColor: async (brandId: string, colorCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('deleteBrandColor', 'brandId', brandId)
            // verify required parameter 'colorCode' is not null or undefined
            assertParamExists('deleteBrandColor', 'colorCode', colorCode)
            const localVarPath = `/api/v1/brands/{brandId}/color`
                .replace(`{${"brandId"}}`, encodeURIComponent(String(brandId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (colorCode !== undefined) {
                localVarQueryParameter['colorCode'] = colorCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} logoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandLogo: async (logoId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logoId' is not null or undefined
            assertParamExists('deleteBrandLogo', 'logoId', logoId)
            const localVarPath = `/api/v1/brands/logo/{logoId}`
                .replace(`{${"logoId"}}`, encodeURIComponent(String(logoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} proFontId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandProFont: async (proFontId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'proFontId' is not null or undefined
            assertParamExists('deleteBrandProFont', 'proFontId', proFontId)
            const localVarPath = `/api/v1/brands/profont/{proFontId}`
                .replace(`{${"proFontId"}}`, encodeURIComponent(String(proFontId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uploadedFontId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandUploadedFont: async (uploadedFontId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadedFontId' is not null or undefined
            assertParamExists('deleteBrandUploadedFont', 'uploadedFontId', uploadedFontId)
            const localVarPath = `/api/v1/brands/uploadedfont/{uploadedFontId}`
                .replace(`{${"uploadedFontId"}}`, encodeURIComponent(String(uploadedFontId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrand: async (id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/brands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandPerLocation: async (locationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('getBrandPerLocation', 'locationId', locationId)
            const localVarPath = `/api/v1/brands/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (locationId !== undefined) {
                localVarQueryParameter['locationId'] = locationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BrandDto} brandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBrand: async (brandDto: BrandDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandDto' is not null or undefined
            assertParamExists('updateBrand', 'brandDto', brandDto)
            const localVarPath = `/api/v1/brands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(brandDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} brandId 
         * @param {string} logoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBrandLogos: async (brandId: string, logoId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('updateBrandLogos', 'brandId', brandId)
            // verify required parameter 'logoId' is not null or undefined
            assertParamExists('updateBrandLogos', 'logoId', logoId)
            const localVarPath = `/api/v1/brands/{brandId}/logo/{logoId}`
                .replace(`{${"brandId"}}`, encodeURIComponent(String(brandId)))
                .replace(`{${"logoId"}}`, encodeURIComponent(String(logoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadBackgroundImage: async (id: string, file: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadBackgroundImage', 'id', id)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadBackgroundImage', 'file', file)
            const localVarPath = `/api/v1/brands/{id}/background-image/upload`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFont: async (id: string, file: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadFont', 'id', id)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadFont', 'file', file)
            const localVarPath = `/api/v1/brands/{id}/font/upload`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadLogo: async (id: string, file: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadLogo', 'id', id)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadLogo', 'file', file)
            const localVarPath = `/api/v1/brands/{id}/logo/upload`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrandsResourceApi - functional programming interface
 * @export
 */
export const BrandsResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrandsResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BrandDto} brandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrand(brandDto: BrandDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrand(brandDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBrand(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBrand(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} brandId 
         * @param {string} colorCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBrandColor(brandId: string, colorCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBrandColor(brandId, colorCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} logoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBrandLogo(logoId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBrandLogo(logoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} proFontId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBrandProFont(proFontId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBrandProFont(proFontId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uploadedFontId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBrandUploadedFont(uploadedFontId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBrandUploadedFont(uploadedFontId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrand(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrand(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrandPerLocation(locationId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrandPerLocation(locationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BrandDto} brandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBrand(brandDto: BrandDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBrand(brandDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} brandId 
         * @param {string} logoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBrandLogos(brandId: string, logoId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBrandLogos(brandId, logoId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadBackgroundImage(id: string, file: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandBackgroundImageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadBackgroundImage(id, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFont(id: string, file: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandUploadedFontDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFont(id, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadLogo(id: string, file: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandLogoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadLogo(id, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BrandsResourceApi - factory interface
 * @export
 */
export const BrandsResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrandsResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {BrandDto} brandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrand(brandDto: BrandDto, options?: any): AxiosPromise<BrandDto> {
            return localVarFp.createBrand(brandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrand(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBrand(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} brandId 
         * @param {string} colorCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandColor(brandId: string, colorCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBrandColor(brandId, colorCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} logoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandLogo(logoId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBrandLogo(logoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} proFontId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandProFont(proFontId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBrandProFont(proFontId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uploadedFontId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandUploadedFont(uploadedFontId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBrandUploadedFont(uploadedFontId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrand(id?: string, options?: any): AxiosPromise<BrandDto> {
            return localVarFp.getBrand(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} locationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandPerLocation(locationId: number, options?: any): AxiosPromise<BrandDto> {
            return localVarFp.getBrandPerLocation(locationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BrandDto} brandDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBrand(brandDto: BrandDto, options?: any): AxiosPromise<BrandDto> {
            return localVarFp.updateBrand(brandDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} brandId 
         * @param {string} logoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBrandLogos(brandId: string, logoId: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateBrandLogos(brandId, logoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadBackgroundImage(id: string, file: File, options?: any): AxiosPromise<BrandBackgroundImageDto> {
            return localVarFp.uploadBackgroundImage(id, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFont(id: string, file: File, options?: any): AxiosPromise<BrandUploadedFontDto> {
            return localVarFp.uploadFont(id, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadLogo(id: string, file: File, options?: any): AxiosPromise<BrandLogoDto> {
            return localVarFp.uploadLogo(id, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BrandsResourceApi - object-oriented interface
 * @export
 * @class BrandsResourceApi
 * @extends {BaseAPI}
 */
export class BrandsResourceApi extends BaseAPI {
    /**
     * 
     * @param {BrandDto} brandDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsResourceApi
     */
    public createBrand(brandDto: BrandDto, options?: AxiosRequestConfig) {
        return BrandsResourceApiFp(this.configuration).createBrand(brandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsResourceApi
     */
    public deleteBrand(id: string, options?: AxiosRequestConfig) {
        return BrandsResourceApiFp(this.configuration).deleteBrand(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} brandId 
     * @param {string} colorCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsResourceApi
     */
    public deleteBrandColor(brandId: string, colorCode: string, options?: AxiosRequestConfig) {
        return BrandsResourceApiFp(this.configuration).deleteBrandColor(brandId, colorCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} logoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsResourceApi
     */
    public deleteBrandLogo(logoId: string, options?: AxiosRequestConfig) {
        return BrandsResourceApiFp(this.configuration).deleteBrandLogo(logoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} proFontId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsResourceApi
     */
    public deleteBrandProFont(proFontId: string, options?: AxiosRequestConfig) {
        return BrandsResourceApiFp(this.configuration).deleteBrandProFont(proFontId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uploadedFontId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsResourceApi
     */
    public deleteBrandUploadedFont(uploadedFontId: string, options?: AxiosRequestConfig) {
        return BrandsResourceApiFp(this.configuration).deleteBrandUploadedFont(uploadedFontId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsResourceApi
     */
    public getBrand(id?: string, options?: AxiosRequestConfig) {
        return BrandsResourceApiFp(this.configuration).getBrand(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} locationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsResourceApi
     */
    public getBrandPerLocation(locationId: number, options?: AxiosRequestConfig) {
        return BrandsResourceApiFp(this.configuration).getBrandPerLocation(locationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrandDto} brandDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsResourceApi
     */
    public updateBrand(brandDto: BrandDto, options?: AxiosRequestConfig) {
        return BrandsResourceApiFp(this.configuration).updateBrand(brandDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} brandId 
     * @param {string} logoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsResourceApi
     */
    public updateBrandLogos(brandId: string, logoId: string, options?: AxiosRequestConfig) {
        return BrandsResourceApiFp(this.configuration).updateBrandLogos(brandId, logoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsResourceApi
     */
    public uploadBackgroundImage(id: string, file: File, options?: AxiosRequestConfig) {
        return BrandsResourceApiFp(this.configuration).uploadBackgroundImage(id, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsResourceApi
     */
    public uploadFont(id: string, file: File, options?: AxiosRequestConfig) {
        return BrandsResourceApiFp(this.configuration).uploadFont(id, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsResourceApi
     */
    public uploadLogo(id: string, file: File, options?: AxiosRequestConfig) {
        return BrandsResourceApiFp(this.configuration).uploadLogo(id, file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LocationsResourceApi - axios parameter creator
 * @export
 */
export const LocationsResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLocation: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteLocation', 'id', id)
            const localVarPath = `/api/v1/locations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {number} [internalId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocation: async (id?: string, internalId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (internalId !== undefined) {
                localVarQueryParameter['internalId'] = internalId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TransferFilesDto} transferFilesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDigitalProducts: async (transferFilesDto: TransferFilesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferFilesDto' is not null or undefined
            assertParamExists('transferDigitalProducts', 'transferFilesDto', transferFilesDto)
            const localVarPath = `/api/v1/locations/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferFilesDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LocationDto} locationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation: async (locationDto: LocationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationDto' is not null or undefined
            assertParamExists('updateLocation', 'locationDto', locationDto)
            const localVarPath = `/api/v1/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationsResourceApi - functional programming interface
 * @export
 */
export const LocationsResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationsResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLocation(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLocation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {number} [internalId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocation(id?: string, internalId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocation(id, internalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TransferFilesDto} transferFilesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferDigitalProducts(transferFilesDto: TransferFilesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferDigitalProducts(transferFilesDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LocationDto} locationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLocation(locationDto: LocationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLocation(locationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocationsResourceApi - factory interface
 * @export
 */
export const LocationsResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationsResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLocation(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLocation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {number} [internalId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocation(id?: string, internalId?: number, options?: any): AxiosPromise<LocationDto> {
            return localVarFp.getLocation(id, internalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TransferFilesDto} transferFilesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDigitalProducts(transferFilesDto: TransferFilesDto, options?: any): AxiosPromise<void> {
            return localVarFp.transferDigitalProducts(transferFilesDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LocationDto} locationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation(locationDto: LocationDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateLocation(locationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocationsResourceApi - object-oriented interface
 * @export
 * @class LocationsResourceApi
 * @extends {BaseAPI}
 */
export class LocationsResourceApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsResourceApi
     */
    public deleteLocation(id: number, options?: AxiosRequestConfig) {
        return LocationsResourceApiFp(this.configuration).deleteLocation(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {number} [internalId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsResourceApi
     */
    public getLocation(id?: string, internalId?: number, options?: AxiosRequestConfig) {
        return LocationsResourceApiFp(this.configuration).getLocation(id, internalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TransferFilesDto} transferFilesDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsResourceApi
     */
    public transferDigitalProducts(transferFilesDto: TransferFilesDto, options?: AxiosRequestConfig) {
        return LocationsResourceApiFp(this.configuration).transferDigitalProducts(transferFilesDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationDto} locationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsResourceApi
     */
    public updateLocation(locationDto: LocationDto, options?: AxiosRequestConfig) {
        return LocationsResourceApiFp(this.configuration).updateLocation(locationDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MembersResourceApi - axios parameter creator
 * @export
 */
export const MembersResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RegisterMemberDto} registerMemberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register1: async (registerMemberDto: RegisterMemberDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerMemberDto' is not null or undefined
            assertParamExists('register1', 'registerMemberDto', registerMemberDto)
            const localVarPath = `/api/v1/public/members/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerMemberDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocationsForMember: async (memberId: string, requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('updateLocationsForMember', 'memberId', memberId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('updateLocationsForMember', 'requestBody', requestBody)
            const localVarPath = `/api/v1/members/{memberId}/locations`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {UpdateMemberDto} updateMemberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMember: async (memberId: string, updateMemberDto: UpdateMemberDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('updateMember', 'memberId', memberId)
            // verify required parameter 'updateMemberDto' is not null or undefined
            assertParamExists('updateMember', 'updateMemberDto', updateMemberDto)
            const localVarPath = `/api/v1/members/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMemberDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {UpdateMemberDto} updateMemberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberInterest: async (memberId: string, updateMemberDto: UpdateMemberDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('updateMemberInterest', 'memberId', memberId)
            // verify required parameter 'updateMemberDto' is not null or undefined
            assertParamExists('updateMemberInterest', 'updateMemberDto', updateMemberDto)
            const localVarPath = `/api/v1/members/{memberId}/interest`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMemberDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembersResourceApi - functional programming interface
 * @export
 */
export const MembersResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembersResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RegisterMemberDto} registerMemberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register1(registerMemberDto: RegisterMemberDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register1(registerMemberDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLocationsForMember(memberId: string, requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLocationsForMember(memberId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {UpdateMemberDto} updateMemberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMember(memberId: string, updateMemberDto: UpdateMemberDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMember(memberId, updateMemberDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {UpdateMemberDto} updateMemberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMemberInterest(memberId: string, updateMemberDto: UpdateMemberDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMemberInterest(memberId, updateMemberDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MembersResourceApi - factory interface
 * @export
 */
export const MembersResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembersResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {RegisterMemberDto} registerMemberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register1(registerMemberDto: RegisterMemberDto, options?: any): AxiosPromise<string> {
            return localVarFp.register1(registerMemberDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocationsForMember(memberId: string, requestBody: Array<string>, options?: any): AxiosPromise<MemberDto> {
            return localVarFp.updateLocationsForMember(memberId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {UpdateMemberDto} updateMemberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMember(memberId: string, updateMemberDto: UpdateMemberDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateMember(memberId, updateMemberDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {UpdateMemberDto} updateMemberDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberInterest(memberId: string, updateMemberDto: UpdateMemberDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateMemberInterest(memberId, updateMemberDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MembersResourceApi - object-oriented interface
 * @export
 * @class MembersResourceApi
 * @extends {BaseAPI}
 */
export class MembersResourceApi extends BaseAPI {
    /**
     * 
     * @param {RegisterMemberDto} registerMemberDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersResourceApi
     */
    public register1(registerMemberDto: RegisterMemberDto, options?: AxiosRequestConfig) {
        return MembersResourceApiFp(this.configuration).register1(registerMemberDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersResourceApi
     */
    public updateLocationsForMember(memberId: string, requestBody: Array<string>, options?: AxiosRequestConfig) {
        return MembersResourceApiFp(this.configuration).updateLocationsForMember(memberId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {UpdateMemberDto} updateMemberDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersResourceApi
     */
    public updateMember(memberId: string, updateMemberDto: UpdateMemberDto, options?: AxiosRequestConfig) {
        return MembersResourceApiFp(this.configuration).updateMember(memberId, updateMemberDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {UpdateMemberDto} updateMemberDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersResourceApi
     */
    public updateMemberInterest(memberId: string, updateMemberDto: UpdateMemberDto, options?: AxiosRequestConfig) {
        return MembersResourceApiFp(this.configuration).updateMemberInterest(memberId, updateMemberDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeamsResourceApi - axios parameter creator
 * @export
 */
export const TeamsResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} teamId 
         * @param {Array<LocationDto>} locationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamLocation: async (teamId: string, locationDto: Array<LocationDto>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('createTeamLocation', 'teamId', teamId)
            // verify required parameter 'locationDto' is not null or undefined
            assertParamExists('createTeamLocation', 'locationDto', locationDto)
            const localVarPath = `/api/v1/teams/{teamId}/locations`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamLocations: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTeamLocations', 'teamId', teamId)
            const localVarPath = `/api/v1/teams/{teamId}/locations`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamUsers: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTeamUsers', 'teamId', teamId)
            const localVarPath = `/api/v1/teams/{teamId}/users`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} teamId 
         * @param {Array<LocationDto>} locationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateTeamLocation: async (teamId: string, locationDto: Array<LocationDto>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('validateTeamLocation', 'teamId', teamId)
            // verify required parameter 'locationDto' is not null or undefined
            assertParamExists('validateTeamLocation', 'locationDto', locationDto)
            const localVarPath = `/api/v1/teams/{teamId}/locations/validate`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(locationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsResourceApi - functional programming interface
 * @export
 */
export const TeamsResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} teamId 
         * @param {Array<LocationDto>} locationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeamLocation(teamId: string, locationDto: Array<LocationDto>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeamLocation(teamId, locationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamLocations(teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LocationDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamLocations(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamUsers(teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MemberDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamUsers(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} teamId 
         * @param {Array<LocationDto>} locationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateTeamLocation(teamId: string, locationDto: Array<LocationDto>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateTeamLocation(teamId, locationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamsResourceApi - factory interface
 * @export
 */
export const TeamsResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} teamId 
         * @param {Array<LocationDto>} locationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamLocation(teamId: string, locationDto: Array<LocationDto>, options?: any): AxiosPromise<void> {
            return localVarFp.createTeamLocation(teamId, locationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamLocations(teamId: string, options?: any): AxiosPromise<Array<LocationDto>> {
            return localVarFp.getTeamLocations(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamUsers(teamId: string, options?: any): AxiosPromise<Array<MemberDto>> {
            return localVarFp.getTeamUsers(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} teamId 
         * @param {Array<LocationDto>} locationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateTeamLocation(teamId: string, locationDto: Array<LocationDto>, options?: any): AxiosPromise<void> {
            return localVarFp.validateTeamLocation(teamId, locationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamsResourceApi - object-oriented interface
 * @export
 * @class TeamsResourceApi
 * @extends {BaseAPI}
 */
export class TeamsResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} teamId 
     * @param {Array<LocationDto>} locationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsResourceApi
     */
    public createTeamLocation(teamId: string, locationDto: Array<LocationDto>, options?: AxiosRequestConfig) {
        return TeamsResourceApiFp(this.configuration).createTeamLocation(teamId, locationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsResourceApi
     */
    public getTeamLocations(teamId: string, options?: AxiosRequestConfig) {
        return TeamsResourceApiFp(this.configuration).getTeamLocations(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsResourceApi
     */
    public getTeamUsers(teamId: string, options?: AxiosRequestConfig) {
        return TeamsResourceApiFp(this.configuration).getTeamUsers(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} teamId 
     * @param {Array<LocationDto>} locationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsResourceApi
     */
    public validateTeamLocation(teamId: string, locationDto: Array<LocationDto>, options?: AxiosRequestConfig) {
        return TeamsResourceApiFp(this.configuration).validateTeamLocation(teamId, locationDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersResourceApi - axios parameter creator
 * @export
 */
export const UsersResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInvite: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserInvite', 'id', id)
            const localVarPath = `/api/v1/public/users/invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<InviteUserDto>} inviteUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUser: async (inviteUserDto: Array<InviteUserDto>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inviteUserDto' is not null or undefined
            assertParamExists('inviteUser', 'inviteUserDto', inviteUserDto)
            const localVarPath = `/api/v1/users/invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inviteUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (registerDto: RegisterDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerDto' is not null or undefined
            assertParamExists('register', 'registerDto', registerDto)
            const localVarPath = `/api/v1/public/users/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUser: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('removeUser', 'memberId', memberId)
            const localVarPath = `/api/v1/users/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeInvitation: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('revokeInvitation', 'memberId', memberId)
            const localVarPath = `/api/v1/users/invites/{memberId}`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendInvitationEmail: async (memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('sendInvitationEmail', 'memberId', memberId)
            const localVarPath = `/api/v1/users/invites/{memberId}/resend`
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<InviteUserDto>} inviteUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateTeamUsers: async (inviteUserDto: Array<InviteUserDto>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inviteUserDto' is not null or undefined
            assertParamExists('validateTeamUsers', 'inviteUserDto', inviteUserDto)
            const localVarPath = `/api/v1/users/invite/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inviteUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersResourceApi - functional programming interface
 * @export
 */
export const UsersResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInvite(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInvite(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<InviteUserDto>} inviteUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteUser(inviteUserDto: Array<InviteUserDto>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteUser(inviteUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(registerDto: RegisterDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(registerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUser(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUser(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeInvitation(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeInvitation(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendInvitationEmail(memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendInvitationEmail(memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<InviteUserDto>} inviteUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateTeamUsers(inviteUserDto: Array<InviteUserDto>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateTeamUsers(inviteUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersResourceApi - factory interface
 * @export
 */
export const UsersResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInvite(id: string, options?: any): AxiosPromise<MemberDto> {
            return localVarFp.getUserInvite(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<InviteUserDto>} inviteUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUser(inviteUserDto: Array<InviteUserDto>, options?: any): AxiosPromise<void> {
            return localVarFp.inviteUser(inviteUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(registerDto: RegisterDto, options?: any): AxiosPromise<string> {
            return localVarFp.register(registerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUser(memberId: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeUser(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeInvitation(memberId: string, options?: any): AxiosPromise<void> {
            return localVarFp.revokeInvitation(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} memberId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendInvitationEmail(memberId: string, options?: any): AxiosPromise<void> {
            return localVarFp.sendInvitationEmail(memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<InviteUserDto>} inviteUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateTeamUsers(inviteUserDto: Array<InviteUserDto>, options?: any): AxiosPromise<void> {
            return localVarFp.validateTeamUsers(inviteUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersResourceApi - object-oriented interface
 * @export
 * @class UsersResourceApi
 * @extends {BaseAPI}
 */
export class UsersResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersResourceApi
     */
    public getUserInvite(id: string, options?: AxiosRequestConfig) {
        return UsersResourceApiFp(this.configuration).getUserInvite(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<InviteUserDto>} inviteUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersResourceApi
     */
    public inviteUser(inviteUserDto: Array<InviteUserDto>, options?: AxiosRequestConfig) {
        return UsersResourceApiFp(this.configuration).inviteUser(inviteUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterDto} registerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersResourceApi
     */
    public register(registerDto: RegisterDto, options?: AxiosRequestConfig) {
        return UsersResourceApiFp(this.configuration).register(registerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersResourceApi
     */
    public removeUser(memberId: string, options?: AxiosRequestConfig) {
        return UsersResourceApiFp(this.configuration).removeUser(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersResourceApi
     */
    public revokeInvitation(memberId: string, options?: AxiosRequestConfig) {
        return UsersResourceApiFp(this.configuration).revokeInvitation(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} memberId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersResourceApi
     */
    public sendInvitationEmail(memberId: string, options?: AxiosRequestConfig) {
        return UsersResourceApiFp(this.configuration).sendInvitationEmail(memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<InviteUserDto>} inviteUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersResourceApi
     */
    public validateTeamUsers(inviteUserDto: Array<InviteUserDto>, options?: AxiosRequestConfig) {
        return UsersResourceApiFp(this.configuration).validateTeamUsers(inviteUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}


