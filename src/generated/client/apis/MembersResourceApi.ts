/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MemberDto,
  RegisterMemberDto,
  UpdateMemberDto,
} from '../models';
import {
    MemberDtoFromJSON,
    MemberDtoToJSON,
    RegisterMemberDtoFromJSON,
    RegisterMemberDtoToJSON,
    UpdateMemberDtoFromJSON,
    UpdateMemberDtoToJSON,
} from '../models';

export interface Register1Request {
    registerMemberDto: RegisterMemberDto;
}

export interface UpdateLocationsForMemberRequest {
    memberId: string;
    requestBody: Array<string>;
}

export interface UpdateMemberRequest {
    memberId: string;
    updateMemberDto: UpdateMemberDto;
}

export interface UpdateMemberInterestRequest {
    memberId: string;
    updateMemberDto: UpdateMemberDto;
}

/**
 * 
 */
export class MembersResourceApi extends runtime.BaseAPI {

    /**
     */
    async register1Raw(requestParameters: Register1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.registerMemberDto === null || requestParameters.registerMemberDto === undefined) {
            throw new runtime.RequiredError('registerMemberDto','Required parameter requestParameters.registerMemberDto was null or undefined when calling register1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/public/members/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterMemberDtoToJSON(requestParameters.registerMemberDto),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async register1(requestParameters: Register1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.register1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateLocationsForMemberRaw(requestParameters: UpdateLocationsForMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling updateLocationsForMember.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling updateLocationsForMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/members/{memberId}/locations`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateLocationsForMember(requestParameters: UpdateLocationsForMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberDto> {
        const response = await this.updateLocationsForMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateMemberRaw(requestParameters: UpdateMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling updateMember.');
        }

        if (requestParameters.updateMemberDto === null || requestParameters.updateMemberDto === undefined) {
            throw new runtime.RequiredError('updateMemberDto','Required parameter requestParameters.updateMemberDto was null or undefined when calling updateMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/members/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMemberDtoToJSON(requestParameters.updateMemberDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateMember(requestParameters: UpdateMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateMemberRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateMemberInterestRaw(requestParameters: UpdateMemberInterestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling updateMemberInterest.');
        }

        if (requestParameters.updateMemberDto === null || requestParameters.updateMemberDto === undefined) {
            throw new runtime.RequiredError('updateMemberDto','Required parameter requestParameters.updateMemberDto was null or undefined when calling updateMemberInterest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/members/{memberId}/interest`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMemberDtoToJSON(requestParameters.updateMemberDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateMemberInterest(requestParameters: UpdateMemberInterestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateMemberInterestRaw(requestParameters, initOverrides);
    }

}
