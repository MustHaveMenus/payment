/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BrandBackgroundImageDto,
  BrandDto,
  BrandLogoDto,
  BrandUploadedFontDto,
} from '../models';
import {
    BrandBackgroundImageDtoFromJSON,
    BrandBackgroundImageDtoToJSON,
    BrandDtoFromJSON,
    BrandDtoToJSON,
    BrandLogoDtoFromJSON,
    BrandLogoDtoToJSON,
    BrandUploadedFontDtoFromJSON,
    BrandUploadedFontDtoToJSON,
} from '../models';

export interface CreateBrandRequest {
    brandDto: BrandDto;
}

export interface DeleteBrandRequest {
    id: string;
}

export interface DeleteBrandColorRequest {
    brandId: string;
    colorCode: string;
}

export interface DeleteBrandLogoRequest {
    logoId: string;
}

export interface DeleteBrandProFontRequest {
    proFontId: string;
}

export interface DeleteBrandUploadedFontRequest {
    uploadedFontId: string;
}

export interface GetBrandRequest {
    id?: string;
}

export interface GetBrandPerLocationRequest {
    locationId: number;
}

export interface UpdateBrandRequest {
    brandDto: BrandDto;
}

export interface UpdateBrandLogosRequest {
    brandId: string;
    logoId: string;
}

export interface UploadBackgroundImageRequest {
    id: string;
    file: Blob;
}

export interface UploadFontRequest {
    id: string;
    file: Blob;
}

export interface UploadLogoRequest {
    id: string;
    file: Blob;
}

/**
 * 
 */
export class BrandsResourceApi extends runtime.BaseAPI {

    /**
     */
    async createBrandRaw(requestParameters: CreateBrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrandDto>> {
        if (requestParameters.brandDto === null || requestParameters.brandDto === undefined) {
            throw new runtime.RequiredError('brandDto','Required parameter requestParameters.brandDto was null or undefined when calling createBrand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/brands`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BrandDtoToJSON(requestParameters.brandDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandDtoFromJSON(jsonValue));
    }

    /**
     */
    async createBrand(requestParameters: CreateBrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrandDto> {
        const response = await this.createBrandRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteBrandRaw(requestParameters: DeleteBrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBrand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/brands/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteBrand(requestParameters: DeleteBrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBrandRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteBrandColorRaw(requestParameters: DeleteBrandColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.brandId === null || requestParameters.brandId === undefined) {
            throw new runtime.RequiredError('brandId','Required parameter requestParameters.brandId was null or undefined when calling deleteBrandColor.');
        }

        if (requestParameters.colorCode === null || requestParameters.colorCode === undefined) {
            throw new runtime.RequiredError('colorCode','Required parameter requestParameters.colorCode was null or undefined when calling deleteBrandColor.');
        }

        const queryParameters: any = {};

        if (requestParameters.colorCode !== undefined) {
            queryParameters['colorCode'] = requestParameters.colorCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/brands/{brandId}/color`.replace(`{${"brandId"}}`, encodeURIComponent(String(requestParameters.brandId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteBrandColor(requestParameters: DeleteBrandColorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBrandColorRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteBrandLogoRaw(requestParameters: DeleteBrandLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.logoId === null || requestParameters.logoId === undefined) {
            throw new runtime.RequiredError('logoId','Required parameter requestParameters.logoId was null or undefined when calling deleteBrandLogo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/brands/logo/{logoId}`.replace(`{${"logoId"}}`, encodeURIComponent(String(requestParameters.logoId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteBrandLogo(requestParameters: DeleteBrandLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBrandLogoRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteBrandProFontRaw(requestParameters: DeleteBrandProFontRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.proFontId === null || requestParameters.proFontId === undefined) {
            throw new runtime.RequiredError('proFontId','Required parameter requestParameters.proFontId was null or undefined when calling deleteBrandProFont.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/brands/profont/{proFontId}`.replace(`{${"proFontId"}}`, encodeURIComponent(String(requestParameters.proFontId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteBrandProFont(requestParameters: DeleteBrandProFontRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBrandProFontRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteBrandUploadedFontRaw(requestParameters: DeleteBrandUploadedFontRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uploadedFontId === null || requestParameters.uploadedFontId === undefined) {
            throw new runtime.RequiredError('uploadedFontId','Required parameter requestParameters.uploadedFontId was null or undefined when calling deleteBrandUploadedFont.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/brands/uploadedfont/{uploadedFontId}`.replace(`{${"uploadedFontId"}}`, encodeURIComponent(String(requestParameters.uploadedFontId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteBrandUploadedFont(requestParameters: DeleteBrandUploadedFontRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBrandUploadedFontRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getBrandRaw(requestParameters: GetBrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrandDto>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/brands`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandDtoFromJSON(jsonValue));
    }

    /**
     */
    async getBrand(requestParameters: GetBrandRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrandDto> {
        const response = await this.getBrandRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBrandPerLocationRaw(requestParameters: GetBrandPerLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrandDto>> {
        if (requestParameters.locationId === null || requestParameters.locationId === undefined) {
            throw new runtime.RequiredError('locationId','Required parameter requestParameters.locationId was null or undefined when calling getBrandPerLocation.');
        }

        const queryParameters: any = {};

        if (requestParameters.locationId !== undefined) {
            queryParameters['locationId'] = requestParameters.locationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/brands/location`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandDtoFromJSON(jsonValue));
    }

    /**
     */
    async getBrandPerLocation(requestParameters: GetBrandPerLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrandDto> {
        const response = await this.getBrandPerLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateBrandRaw(requestParameters: UpdateBrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrandDto>> {
        if (requestParameters.brandDto === null || requestParameters.brandDto === undefined) {
            throw new runtime.RequiredError('brandDto','Required parameter requestParameters.brandDto was null or undefined when calling updateBrand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/brands`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BrandDtoToJSON(requestParameters.brandDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateBrand(requestParameters: UpdateBrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrandDto> {
        const response = await this.updateBrandRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateBrandLogosRaw(requestParameters: UpdateBrandLogosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.brandId === null || requestParameters.brandId === undefined) {
            throw new runtime.RequiredError('brandId','Required parameter requestParameters.brandId was null or undefined when calling updateBrandLogos.');
        }

        if (requestParameters.logoId === null || requestParameters.logoId === undefined) {
            throw new runtime.RequiredError('logoId','Required parameter requestParameters.logoId was null or undefined when calling updateBrandLogos.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/brands/{brandId}/logo/{logoId}`.replace(`{${"brandId"}}`, encodeURIComponent(String(requestParameters.brandId))).replace(`{${"logoId"}}`, encodeURIComponent(String(requestParameters.logoId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateBrandLogos(requestParameters: UpdateBrandLogosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateBrandLogosRaw(requestParameters, initOverrides);
    }

    /**
     */
    async uploadBackgroundImageRaw(requestParameters: UploadBackgroundImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrandBackgroundImageDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling uploadBackgroundImage.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling uploadBackgroundImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/api/v1/brands/{id}/background-image/upload`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandBackgroundImageDtoFromJSON(jsonValue));
    }

    /**
     */
    async uploadBackgroundImage(requestParameters: UploadBackgroundImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrandBackgroundImageDto> {
        const response = await this.uploadBackgroundImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async uploadFontRaw(requestParameters: UploadFontRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrandUploadedFontDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling uploadFont.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling uploadFont.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/api/v1/brands/{id}/font/upload`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandUploadedFontDtoFromJSON(jsonValue));
    }

    /**
     */
    async uploadFont(requestParameters: UploadFontRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrandUploadedFontDto> {
        const response = await this.uploadFontRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async uploadLogoRaw(requestParameters: UploadLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrandLogoDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling uploadLogo.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling uploadLogo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/api/v1/brands/{id}/logo/upload`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandLogoDtoFromJSON(jsonValue));
    }

    /**
     */
    async uploadLogo(requestParameters: UploadLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrandLogoDto> {
        const response = await this.uploadLogoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
