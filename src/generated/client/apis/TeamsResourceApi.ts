/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LocationDto,
  MemberDto,
} from '../models';
import {
    LocationDtoFromJSON,
    LocationDtoToJSON,
    MemberDtoFromJSON,
    MemberDtoToJSON,
} from '../models';

export interface CreateTeamLocationRequest {
    teamId: string;
    locationDto: Array<LocationDto>;
}

export interface GetTeamLocationsRequest {
    teamId: string;
}

export interface GetTeamUsersRequest {
    teamId: string;
}

export interface ValidateTeamLocationRequest {
    teamId: string;
    locationDto: Array<LocationDto>;
}

/**
 * 
 */
export class TeamsResourceApi extends runtime.BaseAPI {

    /**
     */
    async createTeamLocationRaw(requestParameters: CreateTeamLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling createTeamLocation.');
        }

        if (requestParameters.locationDto === null || requestParameters.locationDto === undefined) {
            throw new runtime.RequiredError('locationDto','Required parameter requestParameters.locationDto was null or undefined when calling createTeamLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/teams/{teamId}/locations`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.locationDto.map(LocationDtoToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createTeamLocation(requestParameters: CreateTeamLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createTeamLocationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getTeamLocationsRaw(requestParameters: GetTeamLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationDto>>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling getTeamLocations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/teams/{teamId}/locations`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationDtoFromJSON));
    }

    /**
     */
    async getTeamLocations(requestParameters: GetTeamLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationDto>> {
        const response = await this.getTeamLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTeamUsersRaw(requestParameters: GetTeamUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MemberDto>>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling getTeamUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/teams/{teamId}/users`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MemberDtoFromJSON));
    }

    /**
     */
    async getTeamUsers(requestParameters: GetTeamUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MemberDto>> {
        const response = await this.getTeamUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async validateTeamLocationRaw(requestParameters: ValidateTeamLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling validateTeamLocation.');
        }

        if (requestParameters.locationDto === null || requestParameters.locationDto === undefined) {
            throw new runtime.RequiredError('locationDto','Required parameter requestParameters.locationDto was null or undefined when calling validateTeamLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/teams/{teamId}/locations/validate`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.locationDto.map(LocationDtoToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async validateTeamLocation(requestParameters: ValidateTeamLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.validateTeamLocationRaw(requestParameters, initOverrides);
    }

}
