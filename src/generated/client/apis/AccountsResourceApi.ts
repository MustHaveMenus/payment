/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddOnDto,
  AddonExpirationDto,
  BrandDto,
  FullBillingDto,
  LightCardDto,
  LocationDto,
  MemberDto,
  PaymentDetailsDto,
  PrintDto,
  PurchaseDto,
  SubStatusDto,
  UpdateCardDto,
  UpgradeSubscriptionDto,
  UserDetailsDto,
} from '../models';
import {
    AddOnDtoFromJSON,
    AddOnDtoToJSON,
    AddonExpirationDtoFromJSON,
    AddonExpirationDtoToJSON,
    BrandDtoFromJSON,
    BrandDtoToJSON,
    FullBillingDtoFromJSON,
    FullBillingDtoToJSON,
    LightCardDtoFromJSON,
    LightCardDtoToJSON,
    LocationDtoFromJSON,
    LocationDtoToJSON,
    MemberDtoFromJSON,
    MemberDtoToJSON,
    PaymentDetailsDtoFromJSON,
    PaymentDetailsDtoToJSON,
    PrintDtoFromJSON,
    PrintDtoToJSON,
    PurchaseDtoFromJSON,
    PurchaseDtoToJSON,
    SubStatusDtoFromJSON,
    SubStatusDtoToJSON,
    UpdateCardDtoFromJSON,
    UpdateCardDtoToJSON,
    UpgradeSubscriptionDtoFromJSON,
    UpgradeSubscriptionDtoToJSON,
    UserDetailsDtoFromJSON,
    UserDetailsDtoToJSON,
} from '../models';

export interface AddSubscriptionAddonRequest {
    memberId: string;
    preview: boolean;
    quantity: number;
    body: string;
}

export interface CancelSubscriptionRequest {
    memberId: string;
}

export interface ChangeSubscriptionPlanRequest {
    memberId: string;
    preview: boolean;
    body: string;
}

export interface GetAccountRequest {
    memberId: string;
}

export interface GetAccountPaymentDetailsRequest {
    memberId: string;
}

export interface GetAccountPrintHistoryRequest {
    memberId: string;
}

export interface GetAccountPurchaseInvoicePDFRequest {
    memberId: string;
    transactionId: string;
}

export interface GetAccountPurchasesRequest {
    memberId: string;
}

export interface GetAddOnsExpirationDateRequest {
    memberId: string;
}

export interface GetAllUsersDetailsRequest {
    memberId: string;
}

export interface GetAvailableAddonsRequest {
    memberId: string;
}

export interface GetAvailableSubscriptionsRequest {
    memberId: string;
}

export interface GetMemberRoleRequest {
    memberId: number;
}

export interface GetPrimaryUserLocationRequest {
    memberId: number;
}

export interface GetSubscriptionRequest {
    memberId: string;
}

export interface GetSubscriptionAddonsRequest {
    memberId: string;
}

export interface GetTeamAvailableSeatsRequest {
    teamId: string;
}

export interface GetUserBrandsRequest {
    memberId: string;
}

export interface GetUserLocationsRequest {
    memberId: string;
}

export interface GetUsersDetailsRequest {
    memberId: string;
}

export interface PauseSubscriptionRequest {
    memberId: string;
    body: number;
}

export interface ReactivateSubscriptionRequest {
    memberId: string;
    upgradeSubscriptionDto: UpgradeSubscriptionDto;
}

export interface RecreateSubscriptionPlanRequest {
    memberId: string;
    upgradeSubscriptionDto: UpgradeSubscriptionDto;
}

export interface RemoveSubscriptionAddonRequest {
    memberId: string;
    body: string;
}

export interface ResumeSubscriptionRequest {
    memberId: string;
    upgradeSubscriptionDto: UpgradeSubscriptionDto;
}

export interface SaveFullBillingInfoRequest {
    memberId: string;
    fullBillingDto: FullBillingDto;
}

export interface SetPrimaryUserLocationRequest {
    memberId: number;
    locationId: number;
}

export interface UpdateAccountPaymentDetailsCardRequest {
    memberId: string;
    updateCardDto: UpdateCardDto;
}

export interface UpgradeSubscriptionPlanRequest {
    memberId: string;
    upgradeSubscriptionDto: UpgradeSubscriptionDto;
}

export interface ValidateBillingRequest {
    memberId: string;
}

/**
 * 
 */
export class AccountsResourceApi extends runtime.BaseAPI {

    /**
     */
    async addSubscriptionAddonRaw(requestParameters: AddSubscriptionAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubStatusDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling addSubscriptionAddon.');
        }

        if (requestParameters.preview === null || requestParameters.preview === undefined) {
            throw new runtime.RequiredError('preview','Required parameter requestParameters.preview was null or undefined when calling addSubscriptionAddon.');
        }

        if (requestParameters.quantity === null || requestParameters.quantity === undefined) {
            throw new runtime.RequiredError('quantity','Required parameter requestParameters.quantity was null or undefined when calling addSubscriptionAddon.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addSubscriptionAddon.');
        }

        const queryParameters: any = {};

        if (requestParameters.preview !== undefined) {
            queryParameters['preview'] = requestParameters.preview;
        }

        if (requestParameters.quantity !== undefined) {
            queryParameters['quantity'] = requestParameters.quantity;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/subscription/addons`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubStatusDtoFromJSON(jsonValue));
    }

    /**
     */
    async addSubscriptionAddon(requestParameters: AddSubscriptionAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubStatusDto> {
        const response = await this.addSubscriptionAddonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async cancelSubscriptionRaw(requestParameters: CancelSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubStatusDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling cancelSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/subscription/cancel`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubStatusDtoFromJSON(jsonValue));
    }

    /**
     */
    async cancelSubscription(requestParameters: CancelSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubStatusDto> {
        const response = await this.cancelSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async changeSubscriptionPlanRaw(requestParameters: ChangeSubscriptionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubStatusDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling changeSubscriptionPlan.');
        }

        if (requestParameters.preview === null || requestParameters.preview === undefined) {
            throw new runtime.RequiredError('preview','Required parameter requestParameters.preview was null or undefined when calling changeSubscriptionPlan.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling changeSubscriptionPlan.');
        }

        const queryParameters: any = {};

        if (requestParameters.preview !== undefined) {
            queryParameters['preview'] = requestParameters.preview;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/subscription/change`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubStatusDtoFromJSON(jsonValue));
    }

    /**
     */
    async changeSubscriptionPlan(requestParameters: ChangeSubscriptionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubStatusDto> {
        const response = await this.changeSubscriptionPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAccountRaw(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAccount(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberDto> {
        const response = await this.getAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAccountPaymentDetailsRaw(requestParameters: GetAccountPaymentDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentDetailsDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getAccountPaymentDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/payments`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAccountPaymentDetails(requestParameters: GetAccountPaymentDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentDetailsDto> {
        const response = await this.getAccountPaymentDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAccountPrintHistoryRaw(requestParameters: GetAccountPrintHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PrintDto>>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getAccountPrintHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/prints`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PrintDtoFromJSON));
    }

    /**
     */
    async getAccountPrintHistory(requestParameters: GetAccountPrintHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PrintDto>> {
        const response = await this.getAccountPrintHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAccountPurchaseInvoicePDFRaw(requestParameters: GetAccountPurchaseInvoicePDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getAccountPurchaseInvoicePDF.');
        }

        if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
            throw new runtime.RequiredError('transactionId','Required parameter requestParameters.transactionId was null or undefined when calling getAccountPurchaseInvoicePDF.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/purchases/invoice/{transactionId}`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))).replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getAccountPurchaseInvoicePDF(requestParameters: GetAccountPurchaseInvoicePDFRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAccountPurchaseInvoicePDFRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAccountPurchasesRaw(requestParameters: GetAccountPurchasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PurchaseDto>>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getAccountPurchases.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/purchases`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PurchaseDtoFromJSON));
    }

    /**
     */
    async getAccountPurchases(requestParameters: GetAccountPurchasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PurchaseDto>> {
        const response = await this.getAccountPurchasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAddOnsExpirationDateRaw(requestParameters: GetAddOnsExpirationDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddonExpirationDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getAddOnsExpirationDate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/subscription/addons/expiration`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddonExpirationDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAddOnsExpirationDate(requestParameters: GetAddOnsExpirationDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddonExpirationDto> {
        const response = await this.getAddOnsExpirationDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllUsersDetailsRaw(requestParameters: GetAllUsersDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailsDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getAllUsersDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/users/all`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAllUsersDetails(requestParameters: GetAllUsersDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailsDto> {
        const response = await this.getAllUsersDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAvailableAddonsRaw(requestParameters: GetAvailableAddonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AddOnDto>>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getAvailableAddons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/subscription/availableAddons`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AddOnDtoFromJSON));
    }

    /**
     */
    async getAvailableAddons(requestParameters: GetAvailableAddonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AddOnDto>> {
        const response = await this.getAvailableAddonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAvailableSubscriptionsRaw(requestParameters: GetAvailableSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubStatusDto>>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getAvailableSubscriptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/subscription/list`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubStatusDtoFromJSON));
    }

    /**
     */
    async getAvailableSubscriptions(requestParameters: GetAvailableSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubStatusDto>> {
        const response = await this.getAvailableSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMemberRoleRaw(requestParameters: GetMemberRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getMemberRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/role`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async getMemberRole(requestParameters: GetMemberRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getMemberRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPrimaryUserLocationRaw(requestParameters: GetPrimaryUserLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getPrimaryUserLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/locations/primary`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationDtoFromJSON(jsonValue));
    }

    /**
     */
    async getPrimaryUserLocation(requestParameters: GetPrimaryUserLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationDto> {
        const response = await this.getPrimaryUserLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSubscriptionRaw(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubStatusDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/subscription`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubStatusDtoFromJSON(jsonValue));
    }

    /**
     */
    async getSubscription(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubStatusDto> {
        const response = await this.getSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSubscriptionAddonsRaw(requestParameters: GetSubscriptionAddonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AddOnDto>>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getSubscriptionAddons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/subscription/addons`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AddOnDtoFromJSON));
    }

    /**
     */
    async getSubscriptionAddons(requestParameters: GetSubscriptionAddonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AddOnDto>> {
        const response = await this.getSubscriptionAddonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTeamAvailableSeatsRaw(requestParameters: GetTeamAvailableSeatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling getTeamAvailableSeats.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{teamId}/seats`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async getTeamAvailableSeats(requestParameters: GetTeamAvailableSeatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.getTeamAvailableSeatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserBrandsRaw(requestParameters: GetUserBrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BrandDto>>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getUserBrands.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/brands`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BrandDtoFromJSON));
    }

    /**
     */
    async getUserBrands(requestParameters: GetUserBrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BrandDto>> {
        const response = await this.getUserBrandsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserLocationsRaw(requestParameters: GetUserLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationDto>>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getUserLocations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/locations`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationDtoFromJSON));
    }

    /**
     */
    async getUserLocations(requestParameters: GetUserLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationDto>> {
        const response = await this.getUserLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUsersDetailsRaw(requestParameters: GetUsersDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailsDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling getUsersDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/users`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async getUsersDetails(requestParameters: GetUsersDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailsDto> {
        const response = await this.getUsersDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pauseSubscriptionRaw(requestParameters: PauseSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubStatusDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling pauseSubscription.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling pauseSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/subscription/pause`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubStatusDtoFromJSON(jsonValue));
    }

    /**
     */
    async pauseSubscription(requestParameters: PauseSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubStatusDto> {
        const response = await this.pauseSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async reactivateSubscriptionRaw(requestParameters: ReactivateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubStatusDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling reactivateSubscription.');
        }

        if (requestParameters.upgradeSubscriptionDto === null || requestParameters.upgradeSubscriptionDto === undefined) {
            throw new runtime.RequiredError('upgradeSubscriptionDto','Required parameter requestParameters.upgradeSubscriptionDto was null or undefined when calling reactivateSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/subscription/reactivate`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpgradeSubscriptionDtoToJSON(requestParameters.upgradeSubscriptionDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubStatusDtoFromJSON(jsonValue));
    }

    /**
     */
    async reactivateSubscription(requestParameters: ReactivateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubStatusDto> {
        const response = await this.reactivateSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async recreateSubscriptionPlanRaw(requestParameters: RecreateSubscriptionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubStatusDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling recreateSubscriptionPlan.');
        }

        if (requestParameters.upgradeSubscriptionDto === null || requestParameters.upgradeSubscriptionDto === undefined) {
            throw new runtime.RequiredError('upgradeSubscriptionDto','Required parameter requestParameters.upgradeSubscriptionDto was null or undefined when calling recreateSubscriptionPlan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/subscription/recreate`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpgradeSubscriptionDtoToJSON(requestParameters.upgradeSubscriptionDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubStatusDtoFromJSON(jsonValue));
    }

    /**
     */
    async recreateSubscriptionPlan(requestParameters: RecreateSubscriptionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubStatusDto> {
        const response = await this.recreateSubscriptionPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeSubscriptionAddonRaw(requestParameters: RemoveSubscriptionAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling removeSubscriptionAddon.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling removeSubscriptionAddon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/subscription/addons`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeSubscriptionAddon(requestParameters: RemoveSubscriptionAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeSubscriptionAddonRaw(requestParameters, initOverrides);
    }

    /**
     */
    async resumeSubscriptionRaw(requestParameters: ResumeSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubStatusDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling resumeSubscription.');
        }

        if (requestParameters.upgradeSubscriptionDto === null || requestParameters.upgradeSubscriptionDto === undefined) {
            throw new runtime.RequiredError('upgradeSubscriptionDto','Required parameter requestParameters.upgradeSubscriptionDto was null or undefined when calling resumeSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/subscription/resume`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpgradeSubscriptionDtoToJSON(requestParameters.upgradeSubscriptionDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubStatusDtoFromJSON(jsonValue));
    }

    /**
     */
    async resumeSubscription(requestParameters: ResumeSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubStatusDto> {
        const response = await this.resumeSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async saveFullBillingInfoRaw(requestParameters: SaveFullBillingInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling saveFullBillingInfo.');
        }

        if (requestParameters.fullBillingDto === null || requestParameters.fullBillingDto === undefined) {
            throw new runtime.RequiredError('fullBillingDto','Required parameter requestParameters.fullBillingDto was null or undefined when calling saveFullBillingInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/billing`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FullBillingDtoToJSON(requestParameters.fullBillingDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async saveFullBillingInfo(requestParameters: SaveFullBillingInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.saveFullBillingInfoRaw(requestParameters, initOverrides);
    }

    /**
     */
    async setPrimaryUserLocationRaw(requestParameters: SetPrimaryUserLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling setPrimaryUserLocation.');
        }

        if (requestParameters.locationId === null || requestParameters.locationId === undefined) {
            throw new runtime.RequiredError('locationId','Required parameter requestParameters.locationId was null or undefined when calling setPrimaryUserLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/locations/{locationId}/primary`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))).replace(`{${"locationId"}}`, encodeURIComponent(String(requestParameters.locationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async setPrimaryUserLocation(requestParameters: SetPrimaryUserLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setPrimaryUserLocationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateAccountPaymentDetailsCardRaw(requestParameters: UpdateAccountPaymentDetailsCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LightCardDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling updateAccountPaymentDetailsCard.');
        }

        if (requestParameters.updateCardDto === null || requestParameters.updateCardDto === undefined) {
            throw new runtime.RequiredError('updateCardDto','Required parameter requestParameters.updateCardDto was null or undefined when calling updateAccountPaymentDetailsCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/payments/card`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCardDtoToJSON(requestParameters.updateCardDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LightCardDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateAccountPaymentDetailsCard(requestParameters: UpdateAccountPaymentDetailsCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LightCardDto> {
        const response = await this.updateAccountPaymentDetailsCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async upgradeSubscriptionPlanRaw(requestParameters: UpgradeSubscriptionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubStatusDto>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling upgradeSubscriptionPlan.');
        }

        if (requestParameters.upgradeSubscriptionDto === null || requestParameters.upgradeSubscriptionDto === undefined) {
            throw new runtime.RequiredError('upgradeSubscriptionDto','Required parameter requestParameters.upgradeSubscriptionDto was null or undefined when calling upgradeSubscriptionPlan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/subscription/upgrade`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpgradeSubscriptionDtoToJSON(requestParameters.upgradeSubscriptionDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubStatusDtoFromJSON(jsonValue));
    }

    /**
     */
    async upgradeSubscriptionPlan(requestParameters: UpgradeSubscriptionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubStatusDto> {
        const response = await this.upgradeSubscriptionPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async validateBillingRaw(requestParameters: ValidateBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.memberId === null || requestParameters.memberId === undefined) {
            throw new runtime.RequiredError('memberId','Required parameter requestParameters.memberId was null or undefined when calling validateBilling.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/accounts/{memberId}/billing/validate`.replace(`{${"memberId"}}`, encodeURIComponent(String(requestParameters.memberId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async validateBilling(requestParameters: ValidateBillingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.validateBillingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
