/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BrandBackgroundImageDto } from './BrandBackgroundImageDto';
import {
    BrandBackgroundImageDtoFromJSON,
    BrandBackgroundImageDtoFromJSONTyped,
    BrandBackgroundImageDtoToJSON,
} from './BrandBackgroundImageDto';
import type { BrandColorDto } from './BrandColorDto';
import {
    BrandColorDtoFromJSON,
    BrandColorDtoFromJSONTyped,
    BrandColorDtoToJSON,
} from './BrandColorDto';
import type { BrandFontDto } from './BrandFontDto';
import {
    BrandFontDtoFromJSON,
    BrandFontDtoFromJSONTyped,
    BrandFontDtoToJSON,
} from './BrandFontDto';
import type { BrandLogoDto } from './BrandLogoDto';
import {
    BrandLogoDtoFromJSON,
    BrandLogoDtoFromJSONTyped,
    BrandLogoDtoToJSON,
} from './BrandLogoDto';
import type { BrandProFontDto } from './BrandProFontDto';
import {
    BrandProFontDtoFromJSON,
    BrandProFontDtoFromJSONTyped,
    BrandProFontDtoToJSON,
} from './BrandProFontDto';
import type { BrandUploadedFontDto } from './BrandUploadedFontDto';
import {
    BrandUploadedFontDtoFromJSON,
    BrandUploadedFontDtoFromJSONTyped,
    BrandUploadedFontDtoToJSON,
} from './BrandUploadedFontDto';

/**
 * 
 * @export
 * @interface BrandDto
 */
export interface BrandDto {
    /**
     * 
     * @type {string}
     * @memberof BrandDto
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandDto
     */
    memberId?: string;
    /**
     * 
     * @type {string}
     * @memberof BrandDto
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BrandDto
     */
    draft?: boolean;
    /**
     * 
     * @type {BrandFontDto}
     * @memberof BrandDto
     */
    fontHeader?: BrandFontDto;
    /**
     * 
     * @type {BrandFontDto}
     * @memberof BrandDto
     */
    fontSubheader?: BrandFontDto;
    /**
     * 
     * @type {BrandFontDto}
     * @memberof BrandDto
     */
    fontBodyText?: BrandFontDto;
    /**
     * 
     * @type {Array<BrandLogoDto>}
     * @memberof BrandDto
     */
    logos?: Array<BrandLogoDto>;
    /**
     * 
     * @type {Array<BrandBackgroundImageDto>}
     * @memberof BrandDto
     */
    backgroundImages?: Array<BrandBackgroundImageDto>;
    /**
     * 
     * @type {Array<BrandColorDto>}
     * @memberof BrandDto
     */
    colors?: Array<BrandColorDto>;
    /**
     * 
     * @type {Array<BrandProFontDto>}
     * @memberof BrandDto
     */
    proFonts?: Array<BrandProFontDto>;
    /**
     * 
     * @type {Array<BrandUploadedFontDto>}
     * @memberof BrandDto
     */
    uploadedFonts?: Array<BrandUploadedFontDto>;
}

/**
 * Check if a given object implements the BrandDto interface.
 */
export function instanceOfBrandDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BrandDtoFromJSON(json: any): BrandDto {
    return BrandDtoFromJSONTyped(json, false);
}

export function BrandDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BrandDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'memberId': !exists(json, 'memberId') ? undefined : json['memberId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'draft': !exists(json, 'draft') ? undefined : json['draft'],
        'fontHeader': !exists(json, 'fontHeader') ? undefined : BrandFontDtoFromJSON(json['fontHeader']),
        'fontSubheader': !exists(json, 'fontSubheader') ? undefined : BrandFontDtoFromJSON(json['fontSubheader']),
        'fontBodyText': !exists(json, 'fontBodyText') ? undefined : BrandFontDtoFromJSON(json['fontBodyText']),
        'logos': !exists(json, 'logos') ? undefined : ((json['logos'] as Array<any>).map(BrandLogoDtoFromJSON)),
        'backgroundImages': !exists(json, 'backgroundImages') ? undefined : ((json['backgroundImages'] as Array<any>).map(BrandBackgroundImageDtoFromJSON)),
        'colors': !exists(json, 'colors') ? undefined : ((json['colors'] as Array<any>).map(BrandColorDtoFromJSON)),
        'proFonts': !exists(json, 'proFonts') ? undefined : ((json['proFonts'] as Array<any>).map(BrandProFontDtoFromJSON)),
        'uploadedFonts': !exists(json, 'uploadedFonts') ? undefined : ((json['uploadedFonts'] as Array<any>).map(BrandUploadedFontDtoFromJSON)),
    };
}

export function BrandDtoToJSON(value?: BrandDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'memberId': value.memberId,
        'name': value.name,
        'draft': value.draft,
        'fontHeader': BrandFontDtoToJSON(value.fontHeader),
        'fontSubheader': BrandFontDtoToJSON(value.fontSubheader),
        'fontBodyText': BrandFontDtoToJSON(value.fontBodyText),
        'logos': value.logos === undefined ? undefined : ((value.logos as Array<any>).map(BrandLogoDtoToJSON)),
        'backgroundImages': value.backgroundImages === undefined ? undefined : ((value.backgroundImages as Array<any>).map(BrandBackgroundImageDtoToJSON)),
        'colors': value.colors === undefined ? undefined : ((value.colors as Array<any>).map(BrandColorDtoToJSON)),
        'proFonts': value.proFonts === undefined ? undefined : ((value.proFonts as Array<any>).map(BrandProFontDtoToJSON)),
        'uploadedFonts': value.uploadedFonts === undefined ? undefined : ((value.uploadedFonts as Array<any>).map(BrandUploadedFontDtoToJSON)),
    };
}

