/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LocationDto } from './LocationDto';
import {
    LocationDtoFromJSON,
    LocationDtoFromJSONTyped,
    LocationDtoToJSON,
} from './LocationDto';

/**
 * 
 * @export
 * @interface MemberDto
 */
export interface MemberDto {
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberDto
     */
    internalId?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    friendlyId?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    email?: string;
    /**
     * 
     * @type {Set<LocationDto>}
     * @memberof MemberDto
     */
    locations?: Set<LocationDto>;
    /**
     * 
     * @type {number}
     * @memberof MemberDto
     */
    paymentStatus?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    invitationStatus?: MemberDtoInvitationStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    teamId?: string;
    /**
     * 
     * @type {Date}
     * @memberof MemberDto
     */
    lastLogin?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof MemberDto
     */
    removed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    memberStatus?: MemberDtoMemberStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof MemberDto
     */
    primaryLocationId?: number;
    /**
     * 
     * @type {number}
     * @memberof MemberDto
     */
    availableSeats?: number;
    /**
     * 
     * @type {string}
     * @memberof MemberDto
     */
    role?: MemberDtoRoleEnum;
    /**
     * 
     * @type {Date}
     * @memberof MemberDto
     */
    createdDate?: Date;
}


/**
 * @export
 */
export const MemberDtoInvitationStatusEnum = {
    Invited: 'Invited',
    Active: 'Active',
    Revoked: 'Revoked'
} as const;
export type MemberDtoInvitationStatusEnum = typeof MemberDtoInvitationStatusEnum[keyof typeof MemberDtoInvitationStatusEnum];

/**
 * @export
 */
export const MemberDtoMemberStatusEnum = {
    Active: 'Active',
    Hold: 'Hold',
    Cancelled: 'Cancelled',
    Declined: 'Declined',
    Freemium: 'Freemium',
    Paused: 'Paused',
    PastDue: 'PastDue'
} as const;
export type MemberDtoMemberStatusEnum = typeof MemberDtoMemberStatusEnum[keyof typeof MemberDtoMemberStatusEnum];

/**
 * @export
 */
export const MemberDtoRoleEnum = {
    User: 'User',
    Owner: 'Owner'
} as const;
export type MemberDtoRoleEnum = typeof MemberDtoRoleEnum[keyof typeof MemberDtoRoleEnum];


/**
 * Check if a given object implements the MemberDto interface.
 */
export function instanceOfMemberDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MemberDtoFromJSON(json: any): MemberDto {
    return MemberDtoFromJSONTyped(json, false);
}

export function MemberDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MemberDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'internalId': !exists(json, 'internalId') ? undefined : json['internalId'],
        'friendlyId': !exists(json, 'friendlyId') ? undefined : json['friendlyId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'locations': !exists(json, 'locations') ? undefined : (new Set((json['locations'] as Array<any>).map(LocationDtoFromJSON))),
        'paymentStatus': !exists(json, 'paymentStatus') ? undefined : json['paymentStatus'],
        'invitationStatus': !exists(json, 'invitationStatus') ? undefined : json['invitationStatus'],
        'teamId': !exists(json, 'teamId') ? undefined : json['teamId'],
        'lastLogin': !exists(json, 'lastLogin') ? undefined : (new Date(json['lastLogin'])),
        'removed': !exists(json, 'removed') ? undefined : json['removed'],
        'memberStatus': !exists(json, 'memberStatus') ? undefined : json['memberStatus'],
        'primaryLocationId': !exists(json, 'primaryLocationId') ? undefined : json['primaryLocationId'],
        'availableSeats': !exists(json, 'availableSeats') ? undefined : json['availableSeats'],
        'role': !exists(json, 'role') ? undefined : json['role'],
        'createdDate': !exists(json, 'createdDate') ? undefined : (new Date(json['createdDate'])),
    };
}

export function MemberDtoToJSON(value?: MemberDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'internalId': value.internalId,
        'friendlyId': value.friendlyId,
        'name': value.name,
        'email': value.email,
        'locations': value.locations === undefined ? undefined : (Array.from(value.locations as Set<any>).map(LocationDtoToJSON)),
        'paymentStatus': value.paymentStatus,
        'invitationStatus': value.invitationStatus,
        'teamId': value.teamId,
        'lastLogin': value.lastLogin === undefined ? undefined : (value.lastLogin.toISOString()),
        'removed': value.removed,
        'memberStatus': value.memberStatus,
        'primaryLocationId': value.primaryLocationId,
        'availableSeats': value.availableSeats,
        'role': value.role,
        'createdDate': value.createdDate === undefined ? undefined : (value.createdDate.toISOString()),
    };
}

